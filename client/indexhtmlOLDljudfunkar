<!DOCTYPE html>
<html lang="sv">
<head>
  <meta charset="UTF-8">
  <title>Musicas – Web Playback SDK</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #121212;
      color: #fff;
      text-align: center;
      padding-top: 50px;
    }
    input, button {
      padding: 12px;
      font-size: 16px;
      margin: 10px;
      border-radius: 6px;
      border: none;
    }
    button {
      background-color: #1db954;
      color: white;
      font-weight: bold;
    }
    #countdown {
      font-size: 80px;
      margin-top: 40px;
      display: none;
    }
    #info {
      margin-top: 20px;
      font-size: 18px;
    }
  </style>
  <script src="https://sdk.scdn.co/spotify-player.js"></script>
</head>
<body>
  <h1>Musicas SDK</h1>
  <button onclick="login()">Logga in med Spotify</button>
  <div id="main" style="display:none;">
    <input id="playlist-url" placeholder="Klistra in Spotify playlist-URL" size="50">
    <br>
    <button onclick="loadPlaylist()">OK</button>
  </div>
  <div id="go-section" style="display:none;">
    <button onclick="startCountdown()">GO!</button>
  </div>
  <div id="countdown"></div>
  <div id="info"></div>

  <script>
    let accessToken = '';
    let player;
    let deviceId;
    let tracks = [];
    let selectedTrack;

    function login() {
      window.location.href = "/login";
    }

    async function loadPlaylist() {
      const url = document.getElementById("playlist-url").value;
      const playlistId = url.split("/playlist/")[1].split("?")[0];

      const res = await fetch(`/tracks?playlist_id=${playlistId}`);
      const data = await res.json();
      tracks = data.items.map(item => {
        const t = item.track;
        return {
          uri: t.uri,
          name: t.name,
          artist: t.artists[0].name,
          year: t.album.release_date.split("-")[0]
        };
      });

      document.getElementById("main").style.display = "none";
      document.getElementById("go-section").style.display = "block";
    }

    function startCountdown() {
      document.getElementById("go-section").style.display = "none";
      const countdown = document.getElementById("countdown");
      countdown.style.display = "block";
      let n = 3;
      const intv = setInterval(() => {
        countdown.innerText = n;
        n--;
        if (n < 0) {
          clearInterval(intv);
          countdown.style.display = "none";
          playRandomTrack();
        }
      }, 1000);
    }

    function playRandomTrack() {
      selectedTrack = tracks[Math.floor(Math.random() * tracks.length)];

      fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {
        method: "PUT",
        body: JSON.stringify({ uris: [selectedTrack.uri] }),
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });

      setTimeout(() => {
        document.getElementById("info").innerHTML =
          `<h2>${selectedTrack.artist} – ${selectedTrack.name} (${selectedTrack.year})</h2>`;
      }, 3000);
    }

    window.onSpotifyWebPlaybackSDKReady = () => {
      fetch("/token").then(r => r.json()).then(data => {
        accessToken = data.access_token;

        player = new Spotify.Player({
          name: 'Musicas Player',
          getOAuthToken: cb => { cb(accessToken); },
          volume: 0.8
        });

        player.addListener('ready', ({ device_id }) => {
          deviceId = device_id;
          document.getElementById("main").style.display = "block";
        });

        player.connect();
      });
    };
  </script>
</body>
</html>
